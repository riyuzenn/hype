{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Hype? \u2699 A lightweight command line interface library for creating cli commands. Warning The Documentation site is ongoing . Please be patient while we work on it. Current Progress : 60% Total Documentation Reading Time : 9 minutes Documentation : https://hype.serum.studio GitHub Source : https://github.com/serumstudio/hype Hype CLI is an open source framework use for building command line applications easirer for cli applications that required different type of commands. It also comes with alot of different features that you may want to check out. Hype was mainly built for Anglo ( a modern lightweight web framework for python 3. ) . Because of Hype's capability it becomes easier to build command-line application. Here are some notable key features of Hype . Easy to use and decorator based : Hype require a simple sintax to create commands. Just add a decorator and you're good to go. Doesn't require any 3rd party libraries : With native Hype, it doesn't required any third party libraries to be installed. Except for hype plugins like colors... Minimal Code : Start and code your hype project with minimalist feature.","title":"What is Hype?"},{"location":"#what-is-hype","text":"","title":"What is Hype?"},{"location":"features/","text":"Features Estimated Reading Time : 2 min & 8 sec You probably heard other libraries that are simillar with Hype . Like for example, Typer developed by @tiangolo and Click developed by @pallets . Yet this library was inspired by it. Basically there is alot of differences regarding on the libraries' feature. Here are some list of features from Hype: 1. Easy to code. Hype comes with simple and neat syntax. 2. Decorator based. It is decorator base for easy understanding. You probably don't need to know alot of stuff with python decorator since Hype doesn't teach you about that. See this for more simple explaination about Python Decorators . 3. Production Ready. It not that Hype is built for testing and development. It was built for Production as well! Editor Friendly If you are using a popular code editor that has a auto completion like Visual Studio Code or PyCharm it becomes easier to code with Hype since it supports type hints . User Friendly Library Hype is also user/developer friendly. It has a integrated features making it user friendly. Automatic help command : If you're not aware of it, Hype integrate and add a help command. You can access it by typing the command help . Basic command and option structures : Hype was mainly built at the top of optparse , a standard python library for parsing typicall option. Since optparse doesn't require alot of features including command, Hype was here for you. Tip Did you know that you can set command alias for the command? You can achieve it by using the parameter aliases . Here are the example command. @app . command ( aliases = ( 'g' , 'greeting' )) def greet ( name : str ): app . echo ( 'Hello, {} ' . format ( name )) # Example Command: # python greet.py g --name Zenqi # or # python greet.py greeting --name Zenqi #: Output #: Hello, Zenqi","title":"Features"},{"location":"features/#features","text":"Estimated Reading Time : 2 min & 8 sec You probably heard other libraries that are simillar with Hype . Like for example, Typer developed by @tiangolo and Click developed by @pallets . Yet this library was inspired by it. Basically there is alot of differences regarding on the libraries' feature. Here are some list of features from Hype:","title":"Features"},{"location":"features/#1-easy-to-code","text":"Hype comes with simple and neat syntax.","title":"1. Easy to code."},{"location":"features/#2-decorator-based","text":"It is decorator base for easy understanding. You probably don't need to know alot of stuff with python decorator since Hype doesn't teach you about that. See this for more simple explaination about Python Decorators .","title":"2. Decorator based."},{"location":"features/#3-production-ready","text":"It not that Hype is built for testing and development. It was built for Production as well!","title":"3. Production Ready."},{"location":"features/#editor-friendly","text":"If you are using a popular code editor that has a auto completion like Visual Studio Code or PyCharm it becomes easier to code with Hype since it supports type hints .","title":"Editor Friendly"},{"location":"features/#user-friendly-library","text":"Hype is also user/developer friendly. It has a integrated features making it user friendly. Automatic help command : If you're not aware of it, Hype integrate and add a help command. You can access it by typing the command help . Basic command and option structures : Hype was mainly built at the top of optparse , a standard python library for parsing typicall option. Since optparse doesn't require alot of features including command, Hype was here for you. Tip Did you know that you can set command alias for the command? You can achieve it by using the parameter aliases . Here are the example command. @app . command ( aliases = ( 'g' , 'greeting' )) def greet ( name : str ): app . echo ( 'Hello, {} ' . format ( name )) # Example Command: # python greet.py g --name Zenqi # or # python greet.py greeting --name Zenqi #: Output #: Hello, Zenqi","title":"User Friendly Library"},{"location":"getting-started/","text":"Installation Estimated Reading Time : 20 seconds Note Simple installation can be doned via: $ pip install hypecli $ pip install hypecli ---> 100% $ pip install hypecli [ standard ] ---> 100% $ Successfully installed hypecli Hype comes with different type of installation (with plugins) or (no plugins) . If you want to install the standard installation with hype.color supported, you can achieve it by installing: $ pip install hypecli [ standard ] If you want to Hype with colors , Use the installation code: $ pip install hypecli [ color ] However if you want to add another cool Hype Plugins , use this installation code: $ pip install hypecli [ <plugin_name> ]","title":"Installation"},{"location":"getting-started/#installation","text":"Estimated Reading Time : 20 seconds Note Simple installation can be doned via: $ pip install hypecli $ pip install hypecli ---> 100% $ pip install hypecli [ standard ] ---> 100% $ Successfully installed hypecli Hype comes with different type of installation (with plugins) or (no plugins) . If you want to install the standard installation with hype.color supported, you can achieve it by installing: $ pip install hypecli [ standard ] If you want to Hype with colors , Use the installation code: $ pip install hypecli [ color ] However if you want to add another cool Hype Plugins , use this installation code: $ pip install hypecli [ <plugin_name> ]","title":"Installation"},{"location":"commands/","text":"How Commands work? Total Reading Time : 2 min and 48 seconds Hype 's main feature was creating commands and options. It can be access by the hype.app.command decorator. By understanding how a basic decorator works, you can now use Hype with ease. Here are some sneak peak example \ud83d\udc40 on the Hype core command decorator: @app . command () def greet ( name : str ): app . echo ( 'Hello, {} ' . format ( name )) The structure of the command is simple. The app has a command which define using the command decorator and it accept options based on the function parameters. Command Structure On the other hand, this structure below show how it works. app = Hype () @app . command () def greet ( name : str ): \"\"\" Greet the user \"\"\" app . echo ( 'Hello, {} ' . format ( name )) @app . command () def goodbye ( name : str , formal : bool = False ): \"\"\" Goodbye the user. \"\"\" if formal : app . echo ( 'Goodbye, Mr/Ms {} !' . format ( name )) else : app . echo ( 'Goodbye {} ' . format ( name )) Hype Application ------- | | | - commands | - help | | - The help command is built in. It shows all commands registered | | - greet # This is a command defined by the greet function | | - --name # The option name is defined on the function parameter | | - goodbye # This is a command defined by the goodby function | | - --name # The option name is defined on the function parameter | | - --format # The formal option is defined on the function parameter. | | Tip Did you know that the help description for the command can be automatically define by creating a docstring on a function? @app . command () def greet ( name : str ): \"\"\" Greet the user \"\"\" # -> This is a docstring app . echo ( \"Hello, {} \" . format ( name ))","title":"How Commands work?"},{"location":"commands/#how-commands-work","text":"Total Reading Time : 2 min and 48 seconds Hype 's main feature was creating commands and options. It can be access by the hype.app.command decorator. By understanding how a basic decorator works, you can now use Hype with ease. Here are some sneak peak example \ud83d\udc40 on the Hype core command decorator: @app . command () def greet ( name : str ): app . echo ( 'Hello, {} ' . format ( name )) The structure of the command is simple. The app has a command which define using the command decorator and it accept options based on the function parameters.","title":"How Commands work?"},{"location":"commands/#command-structure","text":"On the other hand, this structure below show how it works. app = Hype () @app . command () def greet ( name : str ): \"\"\" Greet the user \"\"\" app . echo ( 'Hello, {} ' . format ( name )) @app . command () def goodbye ( name : str , formal : bool = False ): \"\"\" Goodbye the user. \"\"\" if formal : app . echo ( 'Goodbye, Mr/Ms {} !' . format ( name )) else : app . echo ( 'Goodbye {} ' . format ( name )) Hype Application ------- | | | - commands | - help | | - The help command is built in. It shows all commands registered | | - greet # This is a command defined by the greet function | | - --name # The option name is defined on the function parameter | | - goodbye # This is a command defined by the goodby function | | - --name # The option name is defined on the function parameter | | - --format # The formal option is defined on the function parameter. | | Tip Did you know that the help description for the command can be automatically define by creating a docstring on a function? @app . command () def greet ( name : str ): \"\"\" Greet the user \"\"\" # -> This is a docstring app . echo ( \"Hello, {} \" . format ( name ))","title":"Command Structure"},{"location":"commands/handling-commands/","text":"Handling Commands Estimated Reading Time : 37 seconds Handling commands with Hype is easier, thanks to modern Python. Currently, nested commands are not yet supported. In this section, we are discussing all parameters that hype.app.command have. Let's now dive in on hype.app.command ! Command Parameter @command() is based on hype.command.HypeCommand . And it takes a few parameters name (str) : The name of the command. If the name is not define, it returns the function name. usage (str) : The usage format for the command. Like for example: @app . command ( usage = '%prog [OPTIONS]' ) ... This shows the usage when the option --help for the command is triggered: Usage: python test.py [OPTIONS] ... help (str) : The help description for the command. You can set this by defining the function docstring aliases (tuple) : Set the aliases for the command. The alias is another keyword for executing commands. Here is the example: @app . command ( aliases = ( 'g' , 'greet' ))","title":"Handling Commands"},{"location":"commands/handling-commands/#handling-commands","text":"Estimated Reading Time : 37 seconds Handling commands with Hype is easier, thanks to modern Python. Currently, nested commands are not yet supported. In this section, we are discussing all parameters that hype.app.command have. Let's now dive in on hype.app.command !","title":"Handling Commands"},{"location":"commands/handling-commands/#command-parameter","text":"@command() is based on hype.command.HypeCommand . And it takes a few parameters name (str) : The name of the command. If the name is not define, it returns the function name. usage (str) : The usage format for the command. Like for example: @app . command ( usage = '%prog [OPTIONS]' ) ... This shows the usage when the option --help for the command is triggered: Usage: python test.py [OPTIONS] ... help (str) : The help description for the command. You can set this by defining the function docstring aliases (tuple) : Set the aliases for the command. The alias is another keyword for executing commands. Here is the example: @app . command ( aliases = ( 'g' , 'greet' ))","title":"Command Parameter"},{"location":"commands/running/","text":"Running The Commands Estimated Reading Time : 1 minute and 11 seconds In Hype Application instance, you may run the code by executing the app function: if __name__ == \"__main__\" : app . run () This will run the entire application and look for the command arguments. Now for running the cli application. Use the command python <filename>.py help to show the help command. This will show every commands registered Brief Explaination Lets say you have a simple app with command greet and goodbye . This command takes both 2 options. The name and age . from hype import Hype #: Import the Hype Application instance from `hype.app` app = Hype () #: Create a Application instance @app . command () #: Create a basic command def greet ( name : str , age : int ): #: This command requires the name and age. app . echo ( 'Hello, {0} . Your age is {1} ' . format ( name , age )) #: Print the output @app . command () #: Create a basic command similar to `greet` but it goodbye the user def goodbye ( name : str , age : int ): #: This command requires the name and age. app . echo ( 'Bye, {0} . Your age is {1} ' . format ( name , age )) #: Print the output if __name__ = \"__main__\" : app . run () #: Running the command Now you created a simple Hype applications. Congrats! In order t orun the command, you need to run it via python. Lets suppose the name of the file is test.py $ python test.py help And then it shows all command registered. The output should look like this Usage: test.py COMMAND [ARGS..] test.py help COMMAND Options: -h, --help show this help message and exit Commands: greet This command accept a positional arguments goodbye This command accept a positional arguments help (?) All details about the commands Finally, you can run the command by passing the command name. $ python test.py greet --name Zenqi --age 5 And the final output should be Hello, Zenqi. Your age is 5","title":"Running The Commands"},{"location":"commands/running/#running-the-commands","text":"Estimated Reading Time : 1 minute and 11 seconds In Hype Application instance, you may run the code by executing the app function: if __name__ == \"__main__\" : app . run () This will run the entire application and look for the command arguments. Now for running the cli application. Use the command python <filename>.py help to show the help command. This will show every commands registered","title":"Running The Commands"},{"location":"commands/running/#brief-explaination","text":"Lets say you have a simple app with command greet and goodbye . This command takes both 2 options. The name and age . from hype import Hype #: Import the Hype Application instance from `hype.app` app = Hype () #: Create a Application instance @app . command () #: Create a basic command def greet ( name : str , age : int ): #: This command requires the name and age. app . echo ( 'Hello, {0} . Your age is {1} ' . format ( name , age )) #: Print the output @app . command () #: Create a basic command similar to `greet` but it goodbye the user def goodbye ( name : str , age : int ): #: This command requires the name and age. app . echo ( 'Bye, {0} . Your age is {1} ' . format ( name , age )) #: Print the output if __name__ = \"__main__\" : app . run () #: Running the command Now you created a simple Hype applications. Congrats! In order t orun the command, you need to run it via python. Lets suppose the name of the file is test.py $ python test.py help And then it shows all command registered. The output should look like this Usage: test.py COMMAND [ARGS..] test.py help COMMAND Options: -h, --help show this help message and exit Commands: greet This command accept a positional arguments goodbye This command accept a positional arguments help (?) All details about the commands Finally, you can run the command by passing the command name. $ python test.py greet --name Zenqi --age 5 And the final output should be Hello, Zenqi. Your age is 5","title":"Brief Explaination"},{"location":"development/","text":"Hype Development Total Reading Time : 4 minutes Hello There \ud83d\udc4b, First thing first I just want to thank you for using the library. This page is all about Hype Development and some Contributing Policy as well as the Code of Conduct . Reason Why We Build Hype Are you curious about the reason why we build Hype? It's simple, to deliver a high quality and easy to use libraries for developers like you. Also, It was mainly developed for Anglo a modern lightweight micro web framework for Python 3.","title":"Hype Development"},{"location":"development/#hype-development","text":"Total Reading Time : 4 minutes Hello There \ud83d\udc4b, First thing first I just want to thank you for using the library. This page is all about Hype Development and some Contributing Policy as well as the Code of Conduct .","title":"Hype Development"},{"location":"development/#reason-why-we-build-hype","text":"Are you curious about the reason why we build Hype? It's simple, to deliver a high quality and easy to use libraries for developers like you. Also, It was mainly developed for Anglo a modern lightweight micro web framework for Python 3.","title":"Reason Why We Build Hype"},{"location":"development/code-of-conduct/","text":"Contributor Covenant Code of Conduct Estimated Reading Time : 3 minutes This is the copy of the from the GitHub repo. Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at zenqipw@gmail.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Code of Conduct"},{"location":"development/code-of-conduct/#contributor-covenant-code-of-conduct","text":"Estimated Reading Time : 3 minutes This is the copy of the from the GitHub repo.","title":"Contributor Covenant Code of Conduct"},{"location":"development/code-of-conduct/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"development/code-of-conduct/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"development/code-of-conduct/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"development/code-of-conduct/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"development/code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at zenqipw@gmail.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"development/code-of-conduct/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"development/code-of-conduct/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"development/code-of-conduct/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"development/code-of-conduct/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"development/code-of-conduct/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"development/code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Attribution"},{"location":"development/contributing/","text":"Contributing Policy Estimated Reading Time : 35 seconds When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Please note we have a code of conduct, please follow it in all your interactions with the project. Pull Request Process 1. Ensure any install or build dependencies are removed before the end of the layer when doing a build. 2. You may merge the Pull Request in once you have the sign-off of two other developers, or if you do not have permission to do that, you may request the second reviewer to merge it for you. 3. Avoid trolling, removing necessary code is prohibited only the unnecessary code. And make sure to avoid untested code before creating a pull request. Emojis Here are some emoji you might want to add when committing. (Not required) \ud83d\udcdd Use this emoji if you update either readme or any docs related \ud83d\udcd7 Use this emoji if you add something \ud83d\udd27 Use this emoji if you update or fix any bugs \ud83c\udfa8 Use this emoji if you fix or update the code format","title":"Contributing Policy"},{"location":"development/contributing/#contributing-policy","text":"Estimated Reading Time : 35 seconds When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Please note we have a code of conduct, please follow it in all your interactions with the project.","title":"Contributing Policy"},{"location":"development/contributing/#pull-request-process","text":"","title":"Pull Request Process"},{"location":"development/contributing/#1-ensure-any-install-or-build-dependencies","text":"are removed before the end of the layer when doing a build.","title":"1. Ensure any install or build dependencies"},{"location":"development/contributing/#2-you-may-merge-the-pull-request","text":"in once you have the sign-off of two other developers, or if you do not have permission to do that, you may request the second reviewer to merge it for you.","title":"2. You may merge the Pull Request"},{"location":"development/contributing/#3-avoid-trolling-removing-necessary","text":"code is prohibited only the unnecessary code. And make sure to avoid untested code before creating a pull request.","title":"3. Avoid trolling, removing necessary"},{"location":"development/contributing/#emojis","text":"Here are some emoji you might want to add when committing. (Not required) \ud83d\udcdd Use this emoji if you update either readme or any docs related \ud83d\udcd7 Use this emoji if you add something \ud83d\udd27 Use this emoji if you update or fix any bugs \ud83c\udfa8 Use this emoji if you fix or update the code format","title":"Emojis"},{"location":"development/contributors/","text":"Hype Contributors Estimated Reading Time : 18 seconds Thanks to this hard-working contributors who develop and maintain the Hype : If you want to contribute, See the Contributing Policy","title":"Contributors"},{"location":"development/contributors/#hype-contributors","text":"Estimated Reading Time : 18 seconds Thanks to this hard-working contributors who develop and maintain the Hype : If you want to contribute, See the Contributing Policy","title":"Hype Contributors"},{"location":"development/release-notes/","text":"Release Notes Estimated Reading Time : 30 seconds Latest Version: 0.0.5 Here are some release notes for the library: 0.0.5 Release Note Fix app.argument bugs Massive bug fixed Note hype.prompt is still not yet released. Probably on v0.0.6 or v0.0.7 . Current Progress : 50% 0.0.4 Release Note Fix plugins error. Add app.argument decorator for handling args. Improved performance Fix app.exit error Next Version Note Add hype.prompt Current progress: 50% 0.0.3 Release Note Note For using UI, kindly read docs for plugin installation Add progressbar UI component plugin Add Spinner UI component plugin Add Table UI Component plugin Fix and add UI component Add app.exit() for Hype Application instance Next Version Note Might add prompt support. 0.0.2 Major Changes Reformat the code, probably this one is the main release. Add color support. You may install via pip install hypecli[color] Next Version Note Might add prompt support on the next version (Planning) Add some UI components lik ProgressBar , Spinner . (Planning) 0.0.1b Major Changes First release of the module from pypi to reserved name","title":"Release Notes"},{"location":"development/release-notes/#release-notes","text":"Estimated Reading Time : 30 seconds Latest Version: 0.0.5 Here are some release notes for the library:","title":"Release Notes"},{"location":"development/release-notes/#005","text":"Release Note Fix app.argument bugs Massive bug fixed Note hype.prompt is still not yet released. Probably on v0.0.6 or v0.0.7 . Current Progress : 50%","title":"0.0.5"},{"location":"development/release-notes/#004","text":"Release Note Fix plugins error. Add app.argument decorator for handling args. Improved performance Fix app.exit error Next Version Note Add hype.prompt Current progress: 50%","title":"0.0.4"},{"location":"development/release-notes/#003","text":"Release Note Note For using UI, kindly read docs for plugin installation Add progressbar UI component plugin Add Spinner UI component plugin Add Table UI Component plugin Fix and add UI component Add app.exit() for Hype Application instance Next Version Note Might add prompt support.","title":"0.0.3"},{"location":"development/release-notes/#002","text":"Major Changes Reformat the code, probably this one is the main release. Add color support. You may install via pip install hypecli[color] Next Version Note Might add prompt support on the next version (Planning) Add some UI components lik ProgressBar , Spinner . (Planning)","title":"0.0.2"},{"location":"development/release-notes/#001b","text":"Major Changes First release of the module from pypi to reserved name","title":"0.0.1b"},{"location":"examples/","text":"Hype Examples Currently this page is ongoing, see the Example folder from GitHub repo.","title":"Hype Examples"},{"location":"examples/#hype-examples","text":"Currently this page is ongoing, see the Example folder from GitHub repo.","title":"Hype Examples"},{"location":"examples/with-colors/","text":"Examples With Colors Currently this page is ongoing, see the Example folder from GitHub repo.","title":"With Colors"},{"location":"examples/with-colors/#examples-with-colors","text":"Currently this page is ongoing, see the Example folder from GitHub repo.","title":"Examples With Colors"},{"location":"plugins/","text":"Hype Plugins Hype also comes with different plugins powered by third party library. In this page, we are discussing about the plugins availabe and how the plugins work Plugin List Here are the list of plugin and its description: color : $ pip install hypecli [ color ] Add a color support for hype applications. This plugin require colorama inorder to work. Also the color plugin comes with color parser. See the next page for more info progress : $ pip install hypecli [ progress ] Add a outstanding and awesome-rich progressbar for hype powered by alive-progress . Alive progress makes it good and easier to work with progressbar. table : $ pip install hypecli [ table ] The table plugin gives a tabulate support for creating hype application. It becomes easier on writing table, thanks to tabulate .","title":"Hype Plugins"},{"location":"plugins/#hype-plugins","text":"Hype also comes with different plugins powered by third party library. In this page, we are discussing about the plugins availabe and how the plugins work","title":"Hype Plugins"},{"location":"plugins/#plugin-list","text":"Here are the list of plugin and its description: color : $ pip install hypecli [ color ] Add a color support for hype applications. This plugin require colorama inorder to work. Also the color plugin comes with color parser. See the next page for more info progress : $ pip install hypecli [ progress ] Add a outstanding and awesome-rich progressbar for hype powered by alive-progress . Alive progress makes it good and easier to work with progressbar. table : $ pip install hypecli [ table ] The table plugin gives a tabulate support for creating hype application. It becomes easier on writing table, thanks to tabulate .","title":"Plugin List"},{"location":"plugins/colors/","text":"Handling Colors Colors with Hype are powered by colorama . In this page, you will learn how to print colored output with the builtin ColorParser of Hype . Parsing Color Parsing color is pretty similar to bbcode . If you don't know what bbcode is, it's ok. It is just a lightweight markup language similar to html. However bbcode uses [] brackets. For more understanding, here is an example: from hype import print print ( '[red]This is red[/red]' ) As you can see we imported the print function from hype.print . It is a wrapper for standard printing or colored printing. Color Tags How convinient is that right? You don't need to format manually with ANSI Codes. Speaking of ANSI Codes, here are some list of supported colors: red : Color Red blue : Color Blue green : Color Green black : Greyish Color cyan : Color Cyan magenta : Color Magenta yellow : Color Yellow white : Color White reset : Reset the color You dont need to define reset. It is already define when closing the tag. Styles Of course, we support style tag as well. bold or b Set the text to bold italic or i Set the text to italic underline or u Set the text to underline Example: from hype import print print ( '[red][b]This is bold red[/b][/red]' ) Background Setting up text background is not same as setting the color of the text. The background uses bg tag and it takes 1 attribute, the color tag. Example: from hype import print print ( '[bg color=red]This is background is color red[/bg]' ) Tip Did you know that nested colors are supported? from hype import print #: Import the print wrapper for color printing. print ( '[red]This [green](green inside the red)[/green] is red[/red]' )","title":"Handling Colors"},{"location":"plugins/colors/#handling-colors","text":"Colors with Hype are powered by colorama . In this page, you will learn how to print colored output with the builtin ColorParser of Hype .","title":"Handling Colors"},{"location":"plugins/colors/#parsing-color","text":"Parsing color is pretty similar to bbcode . If you don't know what bbcode is, it's ok. It is just a lightweight markup language similar to html. However bbcode uses [] brackets. For more understanding, here is an example: from hype import print print ( '[red]This is red[/red]' ) As you can see we imported the print function from hype.print . It is a wrapper for standard printing or colored printing.","title":"Parsing Color"},{"location":"plugins/colors/#color-tags","text":"How convinient is that right? You don't need to format manually with ANSI Codes. Speaking of ANSI Codes, here are some list of supported colors: red : Color Red blue : Color Blue green : Color Green black : Greyish Color cyan : Color Cyan magenta : Color Magenta yellow : Color Yellow white : Color White reset : Reset the color You dont need to define reset. It is already define when closing the tag.","title":"Color Tags"},{"location":"plugins/colors/#styles","text":"Of course, we support style tag as well. bold or b Set the text to bold italic or i Set the text to italic underline or u Set the text to underline Example: from hype import print print ( '[red][b]This is bold red[/b][/red]' )","title":"Styles"},{"location":"plugins/colors/#background","text":"Setting up text background is not same as setting the color of the text. The background uses bg tag and it takes 1 attribute, the color tag. Example: from hype import print print ( '[bg color=red]This is background is color red[/bg]' ) Tip Did you know that nested colors are supported? from hype import print #: Import the print wrapper for color printing. print ( '[red]This [green](green inside the red)[/green] is red[/red]' )","title":"Background"}]}